// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.RobotContainer;

import org.photonvision.PhotonCamera;
import org.photonvision.targeting.PhotonTrackedTarget;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriverInterface extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Define Enumerations
    public enum LateralPosition {
        Left, Center, Right, None, Error 
    }

    public enum VerticalPosition{
        Low, Middle, High, None, Error
    }

    private LateralPosition _aprilTagPosition = LateralPosition.None;
    private LateralPosition _aprilTagOffset = LateralPosition.None;
    private VerticalPosition _targetSelection = VerticalPosition.None;
    public VerticalPosition _gripSelection = VerticalPosition.Middle;

    private boolean LimitSwitchLowTested = false;
    private boolean LimitSwitchHighTested = false;
    private boolean AprilTagTested = false;
    private boolean AutonSelected = false;
    private boolean ReadyForMatch = false;

    private long start_time = 0;


    /**
    *
    */
    public DriverInterface() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SmartDashboard.putBoolean("rpL", false);  // Robot Position Left April Tag
        SmartDashboard.putBoolean("rpM", false);  // Robot Position Middle April Tag
        SmartDashboard.putBoolean("rpR", false);  // Robot Position Right April Tag

        SmartDashboard.putBoolean("roL", false);  // Robot Offset Left
        SmartDashboard.putBoolean("roM", false);  // Robot Offset Middle
        SmartDashboard.putBoolean("roR", false);  // Robot Offset Right

        SmartDashboard.putBoolean("toL", false);  // Target selection Middle
        SmartDashboard.putBoolean("toM", false);  // Target selection Middle
        SmartDashboard.putBoolean("toH", false);  // Target selection High

        SmartDashboard.putBoolean("gripL", false);  // Target selection Middle
        SmartDashboard.putBoolean("gripM", false);  // Target selection Middle
        SmartDashboard.putBoolean("gripH", false);  // Target selection High

        SmartDashboard.putNumber("Auton Delay", 0.0); // Autonomous Delay in seconds
        SmartDashboard.putBoolean("Auton Selected?", false);

        SmartDashboard.putBoolean("lsLow", LimitSwitchLowTested); // Limit Switch Low Tested
        SmartDashboard.putBoolean("lsHigh", LimitSwitchHighTested);// Limit Switch High Tested

        SmartDashboard.putBoolean("April Tag Tested", AprilTagTested);

        SmartDashboard.putBoolean("Ready for Match?",false);


        long start_time = System.currentTimeMillis();

    }


    @Override
    public void periodic() {
        if (System.currentTimeMillis() - start_time > 333) {
            _aprilTagPosition = SetButtons("rpL", "rpM", "rpR", _aprilTagPosition);
            _aprilTagOffset = SetButtons("roL","roM","roR", _aprilTagOffset);
            _targetSelection = SetButtons("toL", "toM", "toH", _targetSelection);
            _gripSelection = SetButtons("gripL", "gripM", "gripH", _gripSelection);
            start_time = System.currentTimeMillis();
        }

        if (!ReadyForMatch) PreMatchTestCompletion();



        // This method will be called once per scheduler run
        LateralPosition p = AprilTagPosition();
        SmartDashboard.putString("April Tag Position", p.name());
        
        p = AprilTagOffset();
        SmartDashboard.putString("April Tag Offset", p.name());
        
        VerticalPosition v = TargetSelection();
        SmartDashboard.putString("Target Selection", v.name());
    
        v = GripSelection();
        SmartDashboard.putString("Grip Selection", v.name());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    private void PreMatchTestCompletion(){
        boolean ready = SmartDashboard.getBoolean("Ready for Match?", false);
        if (!ready){
            if (!LimitSwitchLowTested) LimitSwitchLowTested = !RobotContainer.getInstance().m_liftSubsystem.isBodyTriggered();
            if (!LimitSwitchHighTested) LimitSwitchHighTested = !RobotContainer.getInstance().m_liftSubsystem.isOuterTriggered();
            
            var photonRes = RobotContainer.getInstance().photonCamera.getLatestResult();
            AprilTagTested = photonRes.hasTargets();
            
            if (RobotContainer.getInstance().m_chooser.getSelected() != null) {
                AutonSelected = (RobotContainer.getInstance().m_chooser.getSelected().getName() !="Default");
            }

            ReadyForMatch = LimitSwitchHighTested &&
                LimitSwitchLowTested &&
                AprilTagTested &&
                AutonSelected;
            
            SmartDashboard.putBoolean("Ready for Match?",ReadyForMatch);
            SmartDashboard.putBoolean("lsLow", LimitSwitchLowTested);      // Limit Switch Low Tested
            SmartDashboard.putBoolean("lsHigh", LimitSwitchHighTested);    // Limit Switch High Tested
            SmartDashboard.putBoolean("April Tag Tested", AprilTagTested); // April Tag Tested
            SmartDashboard.putBoolean("Auton Selected?", AutonSelected);

        }
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.


    /** 
     * Return the driver selected april tag.   This is intended to be used for auton
     * and for drive to tag.
     * @return LateralPosition
     */
    public LateralPosition AprilTagPosition(){
        _aprilTagPosition = SetButtons("rpL","rpM","rpR", _aprilTagPosition);
        return _aprilTagPosition;
    }

    
    /** 
     * This returns the offset from the AprilTagPosition()  It is used to tell the robot 
     * to align left, center or right in relation to the selected AprilTagPosition.
     * @return LateralPosition
     */
    public LateralPosition AprilTagOffset(){
        _aprilTagOffset = SetButtons("roL","roM","roR", _aprilTagOffset);
        return _aprilTagOffset;
    };

    
    /** 
     * This returns the the driver selected target position.  Low - floor, Middle - middle target
     * and High for the highest backmost target.
     * @return VerticalPosition
     */
    public VerticalPosition TargetSelection(){
        _targetSelection = SetButtons("toL", "toM", "toH", _targetSelection);
        return _targetSelection;
    };

    
    /** 
     * Returns the user selected grip position.   
     * @return VerticalPosition
     */
    public VerticalPosition GripSelection(){
        _gripSelection = SetButtons("gripL", "gripM", "gripH", _gripSelection);
        return _gripSelection;
    };


    
    /** 
     * @param a
     * @param b
     * @param c
     * @param p
     * @return LateralPosition
     */
    private LateralPosition SetButtons(String a, String b, String c, LateralPosition p){
        LateralPosition retVal = LateralPosition.Error;

        boolean b1 = SmartDashboard.getBoolean(a, false);
        boolean b2 = SmartDashboard.getBoolean(b, false);
        boolean b3 =  SmartDashboard.getBoolean(c, false);
        int i = 0;
        
        if (b1) i = i + 1;
        if (b2) i = i + 1;
        if (b3) i = i + 1;

        if (i > 1){
            if (b1 && (p == LateralPosition.Left)) SmartDashboard.putBoolean(a, false);
            else if (b1) retVal = LateralPosition.Left;
            
            if (b2 && (p == LateralPosition.Center)) SmartDashboard.putBoolean(b, false);
            else if (b2) retVal = LateralPosition.Center;
            
            if (b3 && (p == LateralPosition.Right)) SmartDashboard.putBoolean(c, false);
            else if (b3) retVal = LateralPosition.Right;
        } else if (i == 1){
            if (b1) retVal = LateralPosition.Left;           
            if (b2) retVal = LateralPosition.Center;
            if (b3) retVal = LateralPosition.Right;
        } else
            retVal = LateralPosition.None; 
        return retVal;
    }


    
    /** 
     * @param a
     * @param b
     * @param c
     * @param p
     * @return VerticalPosition
     */
    private VerticalPosition SetButtons(String a, String b, String c, VerticalPosition p){
        VerticalPosition retVal = VerticalPosition.Error;

        boolean b1 = SmartDashboard.getBoolean(a, false);
        boolean b2 = SmartDashboard.getBoolean(b, false);
        boolean b3 =  SmartDashboard.getBoolean(c, false);
        int i = 0;
        
        if (b1) i = i + 1;
        if (b2) i = i + 1;
        if (b3) i = i + 1;

        if (i > 1){
            if (b1 && (p == VerticalPosition.Low)) SmartDashboard.putBoolean(a, false);
            else if (b1) retVal = VerticalPosition.Low;
            
            if (b2 && (p == VerticalPosition.Middle)) SmartDashboard.putBoolean(b, false);
            else if (b2) retVal = VerticalPosition.Middle;
            
            if (b3 && (p == VerticalPosition.High)) SmartDashboard.putBoolean(c, false);
            else if (b3) retVal = VerticalPosition.High;
        } else if (i == 1){
            if (b1) retVal = VerticalPosition.Low;           
            if (b2) retVal = VerticalPosition.Middle;
            if (b3) retVal = VerticalPosition.High;
        } else
            retVal = VerticalPosition.None; 
        return retVal;
    }

    
    
    
    /**
     * Reads the value of the Auton Delay from the driver dashboard and returns the value. 
     * @return double
     */
    public double AutonStartDelay(){
        return SmartDashboard.getNumber("Auton Delay",0);
    }
}
