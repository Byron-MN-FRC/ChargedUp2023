// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.LiftSubsystem;
import frc.robot.subsystems.LiftSubsystem.LiftPosition;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveToPosBody extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final LiftSubsystem m_liftSubsystem;
    private LiftPosition m_LiftPosition;
    private double m_targetEncoders;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public DriveToPosBody(LiftPosition target, LiftSubsystem subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_LiftPosition = target;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_liftSubsystem = subsystem;
        addRequirements(m_liftSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        switch (m_LiftPosition){
            case Stored: m_targetEncoders = m_liftSubsystem.getStoredPosition();
                break;
            case High: m_targetEncoders = m_liftSubsystem.highPos;
                break;
            case Low: m_targetEncoders = m_liftSubsystem.lowPos;
                break;
        }

    }

    // Called every time the scheduler runs while the command is scheduled.
     @Override
    public void execute() {
        // if (m_liftSubsystem.isArmExtended()){
            m_liftSubsystem.setLiftPos(m_targetEncoders);
        // }

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        if(m_liftSubsystem.isBodyTriggered()){
            m_liftSubsystem.stopLift();
            m_liftSubsystem.zeroLift();
        }

        // m_targetEncoders = 0;
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
            return m_liftSubsystem.targetEncoder(m_targetEncoders)||m_liftSubsystem.isBodyTriggered();
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
